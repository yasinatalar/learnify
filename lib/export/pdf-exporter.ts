import jsPDF from 'jspdf'
import 'jspdf-autotable'

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF
  }
}

export interface PDFExportData {
  title: string
  content?: string
  locale?: 'en' | 'de'
  flashcards?: Array<{
    question: string
    answer: string
    explanation?: string
    difficulty: string
    tags: string[]
  }>
  quizzes?: Array<{
    title: string
    questions: Array<{
      question: string
      options: string[]
      correctAnswer: number
      explanation?: string
    }>
  }>
  summaries?: Array<{
    id: string
    title: string
    overview: string
    mainConcepts: string
    keyPoints: string | string[]
    examples: string
    takeaways: string
    prerequisites: string
    methodology: string
    applications: string
    limitations: string
    futureDirections: string
    criticalAnalysis: string
    furtherReading: string
    difficulty: string
    tags: string | string[]
    estimatedReadTime: number
  }>
  metadata?: {
    author?: string
    subject?: string
    keywords?: string[]
    createdAt: string
  }
}

class PDFExporter {
  private readonly margins = { top: 20, left: 20, right: 20, bottom: 20 }
  private readonly pageWidth = 210 // A4 width in mm
  private readonly pageHeight = 297 // A4 height in mm

  private getLocalizedText(key: string, locale: 'en' | 'de' = 'en'): string {
    const translations = {
      en: {
        'document-content': 'Document Content',
        'flashcards': 'Flashcards',
        'quizzes': 'Quizzes',
        'document-summaries': 'Document Summaries',
        'overview': 'Overview',
        'key-points': 'Key Points',
        'main-concepts': 'Main Concepts',
        'examples': 'Examples',
        'key-takeaways': 'Key Takeaways',
        'prerequisites': 'Prerequisites',
        'methodology': 'Methodology',
        'applications': 'Applications',
        'limitations': 'Limitations',
        'future-directions': 'Future Directions',
        'critical-analysis': 'Critical Analysis',
        'further-reading': 'Further Reading',
        'tags': 'Tags',
        'difficulty': 'Difficulty',
        'read-time': 'Read Time',
        'generated-by': 'Generated by LearnifyAI',
        'page-of': 'Page {0} of {1}',
        'correct': 'Correct',
        'incorrect': 'Incorrect',
        'explanation': 'Explanation'
      },
      de: {
        'document-content': 'Dokumentinhalt',
        'flashcards': 'Karteikarten',
        'quizzes': 'Quiz',
        'document-summaries': 'Dokumentzusammenfassungen',
        'overview': 'Überblick',
        'key-points': 'Kernpunkte',
        'main-concepts': 'Hauptkonzepte',
        'examples': 'Beispiele',
        'key-takeaways': 'Wichtige Erkenntnisse',
        'prerequisites': 'Voraussetzungen',
        'methodology': 'Methodik',
        'applications': 'Anwendungen',
        'limitations': 'Beschränkungen',
        'future-directions': 'Zukunftsperspektiven',
        'critical-analysis': 'Kritische Analyse',
        'further-reading': 'Weiterführende Literatur',
        'tags': 'Tags',
        'difficulty': 'Schwierigkeit',
        'read-time': 'Lesezeit',
        'generated-by': 'Generiert von LearnifyAI',
        'page-of': 'Seite {0} von {1}',
        'correct': 'Richtig',
        'incorrect': 'Falsch',
        'explanation': 'Erklärung'
      }
    }
    
    return translations[locale][key] || translations.en[key] || key
  }

  /**
   * Generate PDF document with content and study materials
   */
  async generatePDF(data: PDFExportData): Promise<Blob> {
    const doc = new jsPDF()
    let yPosition = this.margins.top
    const locale = data.locale || 'en'

    // Set document properties
    if (data.metadata) {
      doc.setProperties({
        title: data.title,
        author: data.metadata.author || 'LearnifyAI',
        subject: data.metadata.subject || 'Learning Materials',
        keywords: data.metadata.keywords?.join(', ') || '',
        creator: 'LearnifyAI'
      })
    }

    // Add title
    yPosition = this.addTitle(doc, data.title, yPosition)
    yPosition += 10

    // Add metadata
    if (data.metadata) {
      yPosition = this.addMetadata(doc, data.metadata, yPosition)
      yPosition += 10
    }

    // Add content section
    if (data.content) {
      yPosition = this.addContentSection(doc, data.content, yPosition, locale)
      yPosition += 15
    }

    // Add flashcards section
    if (data.flashcards && data.flashcards.length > 0) {
      yPosition = this.addFlashcardsSection(doc, data.flashcards, yPosition, locale)
      yPosition += 15
    }

    // Add quizzes section
    if (data.quizzes && data.quizzes.length > 0) {
      yPosition = this.addQuizzesSection(doc, data.quizzes, yPosition, locale)
      yPosition += 15
    }

    // Add summaries section
    if (data.summaries && data.summaries.length > 0) {
      yPosition = this.addSummariesSection(doc, data.summaries, yPosition, locale)
    }

    // Add footer
    this.addFooter(doc, locale)

    // Return as blob
    return new Promise((resolve) => {
      const pdfBlob = doc.output('blob')
      resolve(pdfBlob)
    })
  }

  private addTitle(doc: jsPDF, title: string, yPosition: number): number {
    doc.setFontSize(24)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    
    const titleLines = doc.splitTextToSize(title, this.pageWidth - this.margins.left - this.margins.right)
    doc.text(titleLines, this.margins.left, yPosition)
    
    return yPosition + (titleLines.length * 8)
  }

  private addMetadata(doc: jsPDF, metadata: PDFExportData['metadata'], yPosition: number): number {
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(100, 100, 100)
    
    const createdText = `Created: ${new Date(metadata!.createdAt).toLocaleDateString()}`
    doc.text(createdText, this.margins.left, yPosition)
    
    if (metadata!.author) {
      doc.text(`Author: ${metadata!.author}`, this.margins.left, yPosition + 5)
      yPosition += 5
    }
    
    return yPosition + 5
  }

  private addContentSection(doc: jsPDF, content: string, yPosition: number, locale: 'en' | 'de' = 'en'): number {
    // Check if we need a new page
    if (yPosition > this.pageHeight - 50) {
      doc.addPage()
      yPosition = this.margins.top
    }

    // Section header
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    doc.text(this.getLocalizedText('document-content', locale), this.margins.left, yPosition)
    yPosition += 10

    // Add horizontal line
    doc.setLineWidth(0.5)
    doc.line(this.margins.left, yPosition, this.pageWidth - this.margins.right, yPosition)
    yPosition += 8

    // Content text
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(0, 0, 0)

    const contentLines = doc.splitTextToSize(content, this.pageWidth - this.margins.left - this.margins.right)
    
    for (let i = 0; i < contentLines.length; i++) {
      if (yPosition > this.pageHeight - this.margins.bottom) {
        doc.addPage()
        yPosition = this.margins.top
      }
      
      doc.text(contentLines[i], this.margins.left, yPosition)
      yPosition += 6
    }

    return yPosition
  }

  private addFlashcardsSection(doc: jsPDF, flashcards: PDFExportData['flashcards'], yPosition: number, locale: 'en' | 'de' = 'en'): number {
    // Check if we need a new page
    if (yPosition > this.pageHeight - 50) {
      doc.addPage()
      yPosition = this.margins.top
    }

    // Section header
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    doc.text(`${this.getLocalizedText('flashcards', locale)} (${flashcards!.length})`, this.margins.left, yPosition)
    yPosition += 10

    // Add horizontal line
    doc.setLineWidth(0.5)
    doc.line(this.margins.left, yPosition, this.pageWidth - this.margins.right, yPosition)
    yPosition += 10

    // Flashcards table data
    const tableData = flashcards!.map((card, index) => {
      // Handle tags wrapping - create line breaks for better formatting
      let tagsText = card.tags.join(', ')
      const maxLineLength = 25 // Characters per line in tags column
      
      if (tagsText.length > maxLineLength) {
        // Smart wrapping: try to break at commas when possible
        const tags = card.tags
        let wrappedTags = ''
        let currentLine = ''
        
        for (let i = 0; i < tags.length; i++) {
          const tag = tags[i]
          const addition = (currentLine.length > 0 ? ', ' : '') + tag
          
          if (currentLine.length + addition.length > maxLineLength && currentLine.length > 0) {
            wrappedTags += currentLine + '\n'
            currentLine = tag
          } else {
            currentLine += addition
          }
        }
        
        if (currentLine.length > 0) {
          wrappedTags += currentLine
        }
        
        tagsText = wrappedTags
      }
      
      return [
        (index + 1).toString(),
        card.question,
        card.answer,
        card.difficulty,
        tagsText
      ]
    })

    // Use autoTable for better formatting
    doc.autoTable({
      startY: yPosition,
      head: [['#', 
        locale === 'de' ? 'Frage' : 'Question', 
        locale === 'de' ? 'Antwort' : 'Answer', 
        this.getLocalizedText('difficulty', locale), 
        this.getLocalizedText('tags', locale)
      ]],
      body: tableData,
      theme: 'striped',
      headStyles: { fillColor: [66, 139, 202] },
      columnStyles: {
        0: { cellWidth: 10 },
        1: { cellWidth: 'auto' },
        2: { cellWidth: 'auto' },
        3: { cellWidth: 25 },
        4: { cellWidth: 35, overflow: 'linebreak' }
      },
      styles: {
        fontSize: 9,
        cellPadding: 3,
        overflow: 'linebreak',
        cellWidth: 'wrap'
      },
      tableWidth: 'auto',
      margin: { left: this.margins.left, right: this.margins.right }
    })

    return (doc as any).lastAutoTable.finalY + 10
  }

  private addQuizzesSection(doc: jsPDF, quizzes: PDFExportData['quizzes'], yPosition: number, locale: 'en' | 'de' = 'en'): number {
    // Check if we need a new page
    if (yPosition > this.pageHeight - 50) {
      doc.addPage()
      yPosition = this.margins.top
    }

    // Section header
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    doc.text(`${this.getLocalizedText('quizzes', locale)} (${quizzes!.length})`, this.margins.left, yPosition)
    yPosition += 10

    // Add horizontal line
    doc.setLineWidth(0.5)
    doc.line(this.margins.left, yPosition, this.pageWidth - this.margins.right, yPosition)
    yPosition += 10

    quizzes!.forEach((quiz, quizIndex) => {
      // Check if we need a new page
      if (yPosition > this.pageHeight - 60) {
        doc.addPage()
        yPosition = this.margins.top
      }

      // Quiz title
      doc.setFontSize(14)
      doc.setFont('helvetica', 'bold')
      const quizTitleText = `${quizIndex + 1}. ${quiz.title}`
      const quizTitleLines = doc.splitTextToSize(quizTitleText, this.pageWidth - this.margins.left - this.margins.right)
      doc.text(quizTitleLines, this.margins.left, yPosition)
      yPosition += quizTitleLines.length * 6 + 2

      // Quiz questions
      quiz.questions.forEach((question, qIndex) => {
        if (yPosition > this.pageHeight - 40) {
          doc.addPage()
          yPosition = this.margins.top
        }

        // Question
        doc.setFontSize(11)
        doc.setFont('helvetica', 'bold')
        const questionText = `Q${qIndex + 1}: ${question.question}`
        const questionLines = doc.splitTextToSize(questionText, this.pageWidth - this.margins.left - this.margins.right - 10)
        doc.text(questionLines, this.margins.left + 5, yPosition)
        yPosition += questionLines.length * 5 + 3

        // Options
        doc.setFont('helvetica', 'normal')
        question.options.forEach((option, oIndex) => {
          const isCorrect = oIndex === question.correctAnswer
          const optionText = `${String.fromCharCode(65 + oIndex)}. ${option}`
          
          if (isCorrect) {
            doc.setFont('helvetica', 'bold')
            doc.setTextColor(0, 128, 0) // Green for correct answer
          } else {
            doc.setFont('helvetica', 'normal')
            doc.setTextColor(0, 0, 0)
          }
          
          const optionLines = doc.splitTextToSize(optionText, this.pageWidth - this.margins.left - this.margins.right - 10)
          optionLines.forEach((line: string) => {
            if (yPosition > this.pageHeight - this.margins.bottom) {
              doc.addPage()
              yPosition = this.margins.top
            }
            doc.text(line, this.margins.left + 10, yPosition)
            yPosition += 5
          })
        })

        // Explanation
        if (question.explanation) {
          doc.setFont('helvetica', 'italic')
          doc.setTextColor(100, 100, 100)
          const explanationLines = doc.splitTextToSize(`${this.getLocalizedText('explanation', locale)}: ${question.explanation}`, this.pageWidth - this.margins.left - this.margins.right - 10)
          doc.text(explanationLines, this.margins.left + 10, yPosition)
          yPosition += explanationLines.length * 5
        }

        yPosition += 5 // Space between questions
        doc.setTextColor(0, 0, 0) // Reset color
      })

      yPosition += 10 // Space between quizzes
    })

    return yPosition
  }

  private addSummariesSection(doc: jsPDF, summaries: PDFExportData['summaries'], yPosition: number, locale: 'en' | 'de' = 'en'): number {
    // Check if we need a new page
    if (yPosition > this.pageHeight - 50) {
      doc.addPage()
      yPosition = this.margins.top
    }

    // Section header
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    doc.text(`${this.getLocalizedText('document-summaries', locale)} (${summaries!.length})`, this.margins.left, yPosition)
    yPosition += 10

    // Add horizontal line
    doc.setLineWidth(0.5)
    doc.line(this.margins.left, yPosition, this.pageWidth - this.margins.right, yPosition)
    yPosition += 10

    summaries!.forEach((summary, index) => {
      // Check if we need a new page
      if (yPosition > this.pageHeight - 80) {
        doc.addPage()
        yPosition = this.margins.top
      }

      // Summary title
      doc.setFontSize(14)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(0, 0, 0)
      const summaryTitleText = `${index + 1}. ${summary.title}`
      const summaryTitleLines = doc.splitTextToSize(summaryTitleText, this.pageWidth - this.margins.left - this.margins.right)
      doc.text(summaryTitleLines, this.margins.left, yPosition)
      yPosition += summaryTitleLines.length * 6 + 2

      // Difficulty badge
      doc.setFontSize(10)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(100, 100, 100)
      doc.text(`${this.getLocalizedText('difficulty', locale)}: ${summary.difficulty} • ${this.getLocalizedText('read-time', locale)}: ${summary.estimatedReadTime}min`, this.margins.left, yPosition)
      yPosition += 10

      // Overview
      if (summary.overview) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('overview', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const overviewLines = doc.splitTextToSize(summary.overview, this.pageWidth - this.margins.left - this.margins.right - 10)
        overviewLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Key Points
      if (summary.keyPoints) {
        let keyPointsArray: string[] = []
        try {
          keyPointsArray = typeof summary.keyPoints === 'string' 
            ? JSON.parse(summary.keyPoints) 
            : summary.keyPoints
        } catch (e) {
          keyPointsArray = []
        }

        if (keyPointsArray.length > 0) {
          doc.setFontSize(12)
          doc.setFont('helvetica', 'bold')
          doc.setTextColor(0, 0, 0)
          doc.text(`${this.getLocalizedText('key-points', locale)}:`, this.margins.left, yPosition)
          yPosition += 6

          doc.setFontSize(10)
          doc.setFont('helvetica', 'normal')
          keyPointsArray.forEach((point) => {
            if (yPosition > this.pageHeight - this.margins.bottom) {
              doc.addPage()
              yPosition = this.margins.top
            }
            const pointLines = doc.splitTextToSize(`• ${point}`, this.pageWidth - this.margins.left - this.margins.right - 10)
            pointLines.forEach((line: string) => {
              doc.text(line, this.margins.left + 5, yPosition)
              yPosition += 5
            })
          })
          yPosition += 5
        }
      }

      // Main Concepts
      if (summary.mainConcepts) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('main-concepts', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const conceptLines = doc.splitTextToSize(summary.mainConcepts, this.pageWidth - this.margins.left - this.margins.right - 10)
        conceptLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Examples
      if (summary.examples) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('examples', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const exampleLines = doc.splitTextToSize(summary.examples, this.pageWidth - this.margins.left - this.margins.right - 10)
        exampleLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Takeaways
      if (summary.takeaways) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('key-takeaways', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const takeawayLines = doc.splitTextToSize(summary.takeaways, this.pageWidth - this.margins.left - this.margins.right - 10)
        takeawayLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Prerequisites
      if (summary.prerequisites) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('prerequisites', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const prerequisitesLines = doc.splitTextToSize(summary.prerequisites, this.pageWidth - this.margins.left - this.margins.right - 10)
        prerequisitesLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Methodology
      if (summary.methodology) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('methodology', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const methodologyLines = doc.splitTextToSize(summary.methodology, this.pageWidth - this.margins.left - this.margins.right - 10)
        methodologyLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Applications
      if (summary.applications) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('applications', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const applicationsLines = doc.splitTextToSize(summary.applications, this.pageWidth - this.margins.left - this.margins.right - 10)
        applicationsLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Limitations
      if (summary.limitations) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('limitations', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const limitationsLines = doc.splitTextToSize(summary.limitations, this.pageWidth - this.margins.left - this.margins.right - 10)
        limitationsLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Future Directions
      if (summary.futureDirections) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('future-directions', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const futureDirectionsLines = doc.splitTextToSize(summary.futureDirections, this.pageWidth - this.margins.left - this.margins.right - 10)
        futureDirectionsLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Critical Analysis
      if (summary.criticalAnalysis) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('critical-analysis', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const criticalAnalysisLines = doc.splitTextToSize(summary.criticalAnalysis, this.pageWidth - this.margins.left - this.margins.right - 10)
        criticalAnalysisLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Further Reading
      if (summary.furtherReading) {
        doc.setFontSize(12)
        doc.setFont('helvetica', 'bold')
        doc.setTextColor(0, 0, 0)
        doc.text(`${this.getLocalizedText('further-reading', locale)}:`, this.margins.left, yPosition)
        yPosition += 6

        doc.setFontSize(10)
        doc.setFont('helvetica', 'normal')
        const furtherReadingLines = doc.splitTextToSize(summary.furtherReading, this.pageWidth - this.margins.left - this.margins.right - 10)
        furtherReadingLines.forEach((line: string) => {
          if (yPosition > this.pageHeight - this.margins.bottom) {
            doc.addPage()
            yPosition = this.margins.top
          }
          doc.text(line, this.margins.left + 5, yPosition)
          yPosition += 5
        })
        yPosition += 5
      }

      // Tags
      if (summary.tags) {
        let tagsArray: string[] = []
        try {
          tagsArray = typeof summary.tags === 'string' 
            ? summary.tags.split(',').filter(Boolean) 
            : summary.tags
        } catch (e) {
          tagsArray = []
        }

        if (tagsArray.length > 0) {
          doc.setFontSize(10)
          doc.setFont('helvetica', 'italic')
          doc.setTextColor(100, 100, 100)
          const tagsText = `${this.getLocalizedText('tags', locale)}: ${tagsArray.join(', ')}`
          const tagsLines = doc.splitTextToSize(tagsText, this.pageWidth - this.margins.left - this.margins.right)
          tagsLines.forEach((line: string) => {
            if (yPosition > this.pageHeight - this.margins.bottom) {
              doc.addPage()
              yPosition = this.margins.top
            }
            doc.text(line, this.margins.left, yPosition)
            yPosition += 5
          })
          yPosition += 3
        }
      }

      yPosition += 10 // Space between summaries
    })

    return yPosition
  }

  private addFooter(doc: jsPDF, locale: 'en' | 'de' = 'en'): void {
    const pageCount = doc.getNumberOfPages()
    
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      
      // Footer text
      doc.setFontSize(8)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(150, 150, 150)
      
      // Generated by text
      doc.text(this.getLocalizedText('generated-by', locale), this.margins.left, this.pageHeight - 10)
      
      // Page number
      const pageText = this.getLocalizedText('page-of', locale).replace('{0}', i.toString()).replace('{1}', pageCount.toString())
      doc.text(pageText, this.pageWidth - this.margins.right - 20, this.pageHeight - 10)
      
      // Date
      doc.text(new Date().toLocaleDateString(), this.pageWidth / 2 - 10, this.pageHeight - 10)
    }
  }
}

export const pdfExporter = new PDFExporter()